// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: certificate.proto

package certificate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertificateClient is the client API for Certificate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertificateClient interface {
	IssueCertificate(ctx context.Context, in *IssueCertificateReq, opts ...grpc.CallOption) (*IssueCertificateResp, error)
	GetCertificateFileByID(ctx context.Context, in *GetCertificateFileByIDReq, opts ...grpc.CallOption) (*GetCertificateFileByIDResp, error)
	GetCertificateLinkByID(ctx context.Context, in *GetCertificateLinkByIDReq, opts ...grpc.CallOption) (*GetCertificateLinkByIDResp, error)
	AddTemplate(ctx context.Context, in *AddTemplateReq, opts ...grpc.CallOption) (*AddTemplateResp, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*DeleteTemplateResp, error)
}

type certificateClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateClient(cc grpc.ClientConnInterface) CertificateClient {
	return &certificateClient{cc}
}

func (c *certificateClient) IssueCertificate(ctx context.Context, in *IssueCertificateReq, opts ...grpc.CallOption) (*IssueCertificateResp, error) {
	out := new(IssueCertificateResp)
	err := c.cc.Invoke(ctx, "/certificate.Certificate/IssueCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) GetCertificateFileByID(ctx context.Context, in *GetCertificateFileByIDReq, opts ...grpc.CallOption) (*GetCertificateFileByIDResp, error) {
	out := new(GetCertificateFileByIDResp)
	err := c.cc.Invoke(ctx, "/certificate.Certificate/GetCertificateFileByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) GetCertificateLinkByID(ctx context.Context, in *GetCertificateLinkByIDReq, opts ...grpc.CallOption) (*GetCertificateLinkByIDResp, error) {
	out := new(GetCertificateLinkByIDResp)
	err := c.cc.Invoke(ctx, "/certificate.Certificate/GetCertificateLinkByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) AddTemplate(ctx context.Context, in *AddTemplateReq, opts ...grpc.CallOption) (*AddTemplateResp, error) {
	out := new(AddTemplateResp)
	err := c.cc.Invoke(ctx, "/certificate.Certificate/AddTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*DeleteTemplateResp, error) {
	out := new(DeleteTemplateResp)
	err := c.cc.Invoke(ctx, "/certificate.Certificate/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateServer is the server API for Certificate service.
// All implementations must embed UnimplementedCertificateServer
// for forward compatibility
type CertificateServer interface {
	IssueCertificate(context.Context, *IssueCertificateReq) (*IssueCertificateResp, error)
	GetCertificateFileByID(context.Context, *GetCertificateFileByIDReq) (*GetCertificateFileByIDResp, error)
	GetCertificateLinkByID(context.Context, *GetCertificateLinkByIDReq) (*GetCertificateLinkByIDResp, error)
	AddTemplate(context.Context, *AddTemplateReq) (*AddTemplateResp, error)
	DeleteTemplate(context.Context, *DeleteTemplateReq) (*DeleteTemplateResp, error)
	mustEmbedUnimplementedCertificateServer()
}

// UnimplementedCertificateServer must be embedded to have forward compatible implementations.
type UnimplementedCertificateServer struct {
}

func (UnimplementedCertificateServer) IssueCertificate(context.Context, *IssueCertificateReq) (*IssueCertificateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCertificate not implemented")
}
func (UnimplementedCertificateServer) GetCertificateFileByID(context.Context, *GetCertificateFileByIDReq) (*GetCertificateFileByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateFileByID not implemented")
}
func (UnimplementedCertificateServer) GetCertificateLinkByID(context.Context, *GetCertificateLinkByIDReq) (*GetCertificateLinkByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateLinkByID not implemented")
}
func (UnimplementedCertificateServer) AddTemplate(context.Context, *AddTemplateReq) (*AddTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTemplate not implemented")
}
func (UnimplementedCertificateServer) DeleteTemplate(context.Context, *DeleteTemplateReq) (*DeleteTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedCertificateServer) mustEmbedUnimplementedCertificateServer() {}

// UnsafeCertificateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateServer will
// result in compilation errors.
type UnsafeCertificateServer interface {
	mustEmbedUnimplementedCertificateServer()
}

func RegisterCertificateServer(s grpc.ServiceRegistrar, srv CertificateServer) {
	s.RegisterService(&Certificate_ServiceDesc, srv)
}

func _Certificate_IssueCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCertificateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).IssueCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.Certificate/IssueCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).IssueCertificate(ctx, req.(*IssueCertificateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_GetCertificateFileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateFileByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).GetCertificateFileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.Certificate/GetCertificateFileByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).GetCertificateFileByID(ctx, req.(*GetCertificateFileByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_GetCertificateLinkByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateLinkByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).GetCertificateLinkByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.Certificate/GetCertificateLinkByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).GetCertificateLinkByID(ctx, req.(*GetCertificateLinkByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_AddTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).AddTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.Certificate/AddTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).AddTemplate(ctx, req.(*AddTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.Certificate/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).DeleteTemplate(ctx, req.(*DeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Certificate_ServiceDesc is the grpc.ServiceDesc for Certificate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Certificate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "certificate.Certificate",
	HandlerType: (*CertificateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueCertificate",
			Handler:    _Certificate_IssueCertificate_Handler,
		},
		{
			MethodName: "GetCertificateFileByID",
			Handler:    _Certificate_GetCertificateFileByID_Handler,
		},
		{
			MethodName: "GetCertificateLinkByID",
			Handler:    _Certificate_GetCertificateLinkByID_Handler,
		},
		{
			MethodName: "AddTemplate",
			Handler:    _Certificate_AddTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Certificate_DeleteTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certificate.proto",
}
